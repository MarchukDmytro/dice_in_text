/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => DicePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_view = require("@codemirror/view");
var import_state = require("@codemirror/state");
function randomInt(max) {
  const array = new Uint32Array(1);
  crypto.getRandomValues(array);
  return array[0] % max;
}
var DicePlugin = class extends import_obsidian.Plugin {
  onload() {
    console.log("Loading Dice Plugin");
    this.registerMarkdownPostProcessor((el) => {
      const diceRegex = /(\d+[dк]\d+([\+\-]\d+)?)/ig;
      el.querySelectorAll("p, li").forEach((block) => {
        var _a;
        const text = (_a = block.textContent) != null ? _a : "";
        const parts = text.split(diceRegex);
        block.empty();
        parts.forEach((part) => {
          if (part.match(diceRegex)) {
            const span = block.createSpan({
              text: part,
              cls: "clickable-dice"
            });
            span.setAttr("data-dice-formula", part);
          } else {
            block.appendText(part);
          }
        });
      });
    });
    this.registerEditorExtension(this.createLivePreviewPlugin());
    document.addEventListener("click", (evt) => {
      const target = evt.target;
      if (target.classList.contains("clickable-dice")) {
        const formula = target.getAttribute("data-dice-formula");
        if (formula) {
          const rollResult = this.rollDice(formula);
          const notice = new import_obsidian.Notice(rollResult.text, 8e3);
          if (rollResult.cssClass) {
            notice.noticeEl.classList.add(rollResult.cssClass);
          }
        }
      }
    });
  }
  rollDice(formula) {
    const match = formula.match(/(\d+)[dк](\d+)([+-]\d+)?/i);
    if (!match) return { text: "Invalid dice formula" };
    const num = parseInt(match[1], 10);
    const sides = parseInt(match[2], 10);
    const modifier = match[3] ? parseInt(match[3], 10) : 0;
    let rolls = [];
    let baseSum = 0;
    for (let i = 0; i < num; i++) {
      const roll = randomInt(sides) + 1;
      rolls.push(roll);
      baseSum += roll;
    }
    const finalSum = baseSum + modifier;
    let noticeText = `\u{1F3B2} ${formula}
`;
    noticeText += `Rolls: [${rolls.join("] [")}]
`;
    noticeText += `Sum: ${baseSum}`;
    if (modifier !== 0) {
      noticeText += ` ${modifier > 0 ? "+" : "-"} ${Math.abs(modifier)}`;
    }
    noticeText += ` = ${finalSum}`;
    let cssClass;
    if (num === 1 && sides === 20) {
      if (rolls[0] === 20) cssClass = "dice-critical-success";
      if (rolls[0] === 1) cssClass = "dice-critical-fail";
    }
    return { text: noticeText, cssClass };
  }
  createLivePreviewPlugin() {
    const diceRegex = /(\d+[dк]\d+([\+\-]\d+)?)/ig;
    return import_view.ViewPlugin.fromClass(class {
      constructor(view) {
        this.decorations = this.buildDecorations(view);
      }
      update(update) {
        if (update.docChanged || update.viewportChanged) {
          this.decorations = this.buildDecorations(update.view);
        }
      }
      buildDecorations(view) {
        const builder = new import_state.RangeSetBuilder();
        for (let { from, to } of view.visibleRanges) {
          const text = view.state.doc.sliceString(from, to);
          let match;
          while ((match = diceRegex.exec(text)) !== null) {
            const start = from + match.index;
            const end = start + match[0].length;
            builder.add(
              start,
              end,
              import_view.Decoration.mark({
                class: "clickable-dice",
                attributes: { "data-dice-formula": match[0] }
              })
            );
          }
        }
        return builder.finish();
      }
    }, {
      decorations: (v) => v.decorations
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
